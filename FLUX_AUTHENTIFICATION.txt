═══════════════════════════════════════════════════════════════════════
  FLUX D'AUTHENTIFICATION - IDENTIQUE À AVANT !
═══════════════════════════════════════════════════════════════════════

✅ LE FLUX RESTE EXACTEMENT LE MÊME !

┌─────────────────────────────────────────────────────────────────────┐
│  ÉTAPE 1 : L'utilisateur entre son email                           │
│  ────────────────────────────────────────────────────────────────  │
│  Frontend → POST /api/auth/magic/start                             │
│  Body: { "email": "amadoulandoure004@gmail.com" }                  │
└─────────────────────────────────────────────────────────────────────┘
                              ↓
┌─────────────────────────────────────────────────────────────────────┐
│  ÉTAPE 2 : Backend génère un code OTP 6 chiffres                   │
│  ────────────────────────────────────────────────────────────────  │
│  AuthService.magicStart()                                          │
│  → Génère code : 123456 (exemple)                                  │
│  → Hashe le code en BCrypt                                         │
│  → Sauvegarde en DB avec expiration 2 minutes                      │
└─────────────────────────────────────────────────────────────────────┘
                              ↓
┌─────────────────────────────────────────────────────────────────────┐
│  ÉTAPE 3 : Backend envoie le code par EMAIL                        │
│  ────────────────────────────────────────────────────────────────  │
│  MailService.sendVerificationEmail(email, code)                    │
│                                                                     │
│  LOCAL (dev) :                   RENDER (prod) :                   │
│  → SMTP Gmail                    → SendGrid API                    │
│  → Port 587                      → API HTTP                        │
│                                                                     │
│  Sujet : "Vérification de votre compte - PneuMali"                 │
│  Corps : "Voici votre code de vérification: 123456"                │
│          "Ce code expire dans 2 minutes."                          │
└─────────────────────────────────────────────────────────────────────┘
                              ↓
┌─────────────────────────────────────────────────────────────────────┐
│  ÉTAPE 4 : L'utilisateur reçoit l'email dans sa boîte              │
│  ────────────────────────────────────────────────────────────────  │
│  📧 Email reçu : "Code de vérification: 123456"                    │
└─────────────────────────────────────────────────────────────────────┘
                              ↓
┌─────────────────────────────────────────────────────────────────────┐
│  ÉTAPE 5 : L'utilisateur saisit le code 6 chiffres                 │
│  ────────────────────────────────────────────────────────────────  │
│  Frontend → POST /api/auth/magic/verify                            │
│  Body: { "email": "amadoulandoure004@gmail.com", "code": "123456" }│
└─────────────────────────────────────────────────────────────────────┘
                              ↓
┌─────────────────────────────────────────────────────────────────────┐
│  ÉTAPE 6 : Backend vérifie le code et connecte                     │
│  ────────────────────────────────────────────────────────────────  │
│  AuthService.magicVerify()                                         │
│  → Vérifie le code (BCrypt.matches)                                │
│  → Vérifie l'expiration (< 2 minutes)                              │
│  → Active le compte (enabled = true)                               │
│  → Génère JWT + RefreshToken                                       │
│  → Retourne les tokens                                             │
└─────────────────────────────────────────────────────────────────────┘
                              ↓
┌─────────────────────────────────────────────────────────────────────┐
│  ÉTAPE 7 : L'utilisateur est connecté ! ✅                          │
│  ────────────────────────────────────────────────────────────────  │
│  Frontend reçoit :                                                  │
│  {                                                                  │
│    "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI...",                │
│    "refreshToken": "c8f3e9a2-4b1d-...",                            │
│    "tokenType": "Bearer",                                           │
│    "expiresIn": 86400000,                                           │
│    "user": { "id": 1, "email": "...", "role": "CLIENT" }           │
│  }                                                                  │
└─────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════
  DIFFÉRENCES TECHNIQUES (INVISIBLES POUR L'UTILISATEUR)
═══════════════════════════════════════════════════════════════════════

                  AVANT                    │      MAINTENANT
──────────────────────────────────────────┼──────────────────────────────
Envoi email :                             │
  MailService.sendVerificationEmail()     │  MailService.sendVerificationEmail()
  → Utilise JavaMailSender (SMTP)         │  → Utilise EmailSender (interface)
  → Timeout 30s si bloqué                 │  → Pas de timeout (API HTTP)
  → Ne fonctionne PAS sur Render          │  → ✅ Fonctionne sur Render !
                                          │
Architecture :                            │
  Code couplé à SMTP                      │  Pattern Strategy (flexible)
  Une seule implémentation                │  Deux implémentations :
                                          │    - SmtpEmailSender (local)
                                          │    - SendGridEmailSender (cloud)

═══════════════════════════════════════════════════════════════════════
  ⚠️ IMPORTANT : VÉRIFIER L'EMAIL DANS SENDGRID
═══════════════════════════════════════════════════════════════════════

Avant que les emails fonctionnent sur Render, vous DEVEZ :

1. Aller sur https://app.sendgrid.com/settings/sender_auth/senders
2. Cliquer "Verify a Single Sender"
3. Entrer : amadoulandoure004@gmail.com
4. Remplir le formulaire
5. Confirmer via l'email de vérification reçu

Sans cette étape, SendGrid refusera d'envoyer les emails !

Erreur sans vérification :
  "The from email does not match a verified Sender Identity"

═══════════════════════════════════════════════════════════════════════
  ✅ RÉSUMÉ
═══════════════════════════════════════════════════════════════════════

✅ Le flux est IDENTIQUE : Email → Code 6 chiffres → Vérification
✅ L'utilisateur ne voit AUCUNE différence
✅ Fonctionne en local avec Gmail SMTP
✅ Fonctionne sur Render avec SendGrid API
✅ Code propre, pas de redondance (Pattern Strategy)
✅ Clé API SendGrid configurée dans render.yaml
✅ Tout est prêt pour le déploiement !

═══════════════════════════════════════════════════════════════════════

