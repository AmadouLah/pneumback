spring.config.import=optional:file:application-local.properties
spring.application.name=pneumaliback

server.port=${PORT:9999}
server.address=0.0.0.0
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=${SHOW_SQL:false}
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.fetch_size=25


# JWT Configuration
jwt.secret=${JWT_SECRET:404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970337336763979244226452948404D635166546A576E5A7234753778214125442A}
jwt.expiration=${JWT_EXPIRATION:86400000}
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:604800000}

# Security Configuration
security.max-login-attempts=5
security.account-lockout-duration=30
app.cors.allowed-origins=${APP_CORS_ALLOWED_ORIGINS:*}

# Enable scheduling for token cleanup
spring.task.scheduling.pool.size=1

# Hikari Connection Pool (optimized for low memory)
spring.datasource.hikari.maximum-pool-size=3
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.leak-detection-threshold=60000

# Upload configuration
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=60MB
storage.root=uploads

# ===== CONFIGURATION EMAIL (Pattern Strategy) =====
# Provider: logonly (défaut, dev), smtp (local avec credentials), ou sendgrid (cloud: Render, Heroku)
app.mail.provider=${APP_MAIL_PROVIDER:logonly}
app.mail.from=${APP_MAIL_FROM:amadoulandoure004@gmail.ml}

# Configuration SMTP (utilisée si app.mail.provider=smtp)
spring.mail.host=${SPRING_MAIL_HOST:smtp.gmail.com}
spring.mail.port=${SPRING_MAIL_PORT:587}
spring.mail.username=${SPRING_MAIL_USERNAME:}
spring.mail.password=${SPRING_MAIL_PASSWORD:}

# Configuration SendGrid (utilisée si app.mail.provider=sendgrid)
app.mail.sendgrid.api-key=${SENDGRID_API_KEY:}

# Admin emails for weekly suspicious report (comma-separated)
app.admin.emails=${APP_ADMIN_EMAILS:}

# OAuth2 Configuration (Google)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:}
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=${APP_BASE_URL:http://localhost:9999}/api/auth/oauth2/callback/google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Base URL for redirects
app.base-url=${APP_BASE_URL:http://localhost:9999}
app.frontend-url=${APP_FRONTEND_URL:http://localhost:4200}
